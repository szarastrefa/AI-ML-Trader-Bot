version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    container_name: ai_trader_backend
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
      - ./models:/app/models
      - ./data:/app/data
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://trader_user:trader_pass@db:5432/ai_trader_db
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    networks:
      - trader_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
    container_name: ai_trader_frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000
    depends_on:
      - backend
    networks:
      - trader_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:15
    container_name: ai_trader_db
    environment:
      POSTGRES_DB: ai_trader_db
      POSTGRES_USER: trader_user
      POSTGRES_PASSWORD: trader_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - trader_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trader_user -d ai_trader_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: ai_trader_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trader_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery worker for background tasks
  celery_worker:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    container_name: ai_trader_celery_worker
    command: celery -A backend.tasks worker --loglevel=info
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
      - ./models:/app/models
      - ./data:/app/data
    environment:
      - DATABASE_URL=postgresql://trader_user:trader_pass@db:5432/ai_trader_db
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    networks:
      - trader_network
    restart: unless-stopped

  # Celery beat scheduler
  celery_beat:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    container_name: ai_trader_celery_beat
    command: celery -A backend.tasks beat --loglevel=info
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    environment:
      - DATABASE_URL=postgresql://trader_user:trader_pass@db:5432/ai_trader_db
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    networks:
      - trader_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  trader_network:
    driver: bridge